<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.sun.suma.dao.IUserDao" >
  <resultMap id="BaseResultMap" type="com.sun.suma.entity.User" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="username" property="username" jdbcType="VARCHAR" />
    <result column="password" property="password" jdbcType="VARCHAR" />
    <result column="age" property="age" jdbcType="INTEGER" />
  </resultMap>
  <!-- 查询用户时，同时查询用户对应的书单名，主要不能有重名字段，例如两个表中均有id,因此要使用别名来处理-->
  <resultMap id="UserWithBookResultMap" type="com.sun.suma.entity.User" >
    <id column="user_id" property="id" jdbcType="INTEGER" />
    <result column="username" property="username" jdbcType="VARCHAR" />
    <result column="password" property="password" jdbcType="VARCHAR" />
    <result column="age" property="age" jdbcType="INTEGER" />
    <!-- 使用collection标签映射多方-->
    <collection property="books" ofType="com.sun.suma.entity.Book"  javaType="ArrayList">
      <id column="book_id" property="id" jdbcType="INTEGER" />
	  <result column="bookname" property="bookName" />
	  <result column="publishing" property="publishing"/>
	  <result column="year" property="year" />
    </collection>
  </resultMap>
  <sql id="Base_Column_List" >
    id, username, password, age
  </sql>
  <!-- 查询用户，但不涉及书单-->
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from user
    where id = #{id,jdbcType=INTEGER}
  </select>
  <!--查询用户，涉及书单-->
    <select id="selectUserWithBookById" resultMap="UserWithBookResultMap" parameterType="java.lang.Integer" >
    select 
    a.id user_id,a.username,a.password,a.age,b.id book_id,b.bookname,b.publishing,b.year
    from user a left join book b on
    a.id=b.userId
    where a.id = #{a.id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from user
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.sun.suma.entity.User" >
    insert into user (id, username, password, 
      age)
    values (#{id,jdbcType=INTEGER}, #{username,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR}, 
      #{age,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.sun.suma.entity.User" >
    insert into user
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="username!= null" >
        username,
      </if>
      <if test="password != null" >
        password,
      </if>
      <if test="age != null" >
        age,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="username!= null" >
        #{username,jdbcType=VARCHAR},
      </if>
      <if test="password != null" >
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="age != null" >
        #{age,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.sun.suma.entity.User" >
    update user
    <set >
      <if test=" != null" >
        username = #{username,jdbcType=VARCHAR},
      </if>
      <if test="password != null" >
        password = #{password,jdbcType=VARCHAR},
      </if>
      <if test="age != null" >
        age = #{age,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.sun.suma.entity.User" >
    update user
    set username = #{username,jdbcType=VARCHAR},
      password = #{password,jdbcType=VARCHAR},
      age = #{age,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>